import{CompilerConfig,ResourceLoader}from"@angular/compiler";import*as i0 from"@angular/core";import{InjectionToken,createPlatformFactory,platformCore,COMPILER_OPTIONS,CompilerFactory,Injectable,Version,ViewEncapsulation,MissingTranslationStrategy,Injector,isDevMode,Compiler,PLATFORM_ID,ɵglobal}from"@angular/core";import{ɵPLATFORM_BROWSER_ID}from"@angular/common";import{ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS}from"@angular/platform-browser";new InjectionToken("ErrorCollector");const COMPILER_PROVIDERS=[{provide:Compiler,useFactory:()=>new Compiler}];class JitCompilerFactory{constructor(defaultOptions){const compilerOptions={useJit:!0,defaultEncapsulation:ViewEncapsulation.Emulated,missingTranslation:MissingTranslationStrategy.Warning};this._defaultOptions=[compilerOptions,...defaultOptions]}createCompiler(options=[]){const opts={useJit:_lastDefined((optionsArr=this._defaultOptions.concat(options)).map(options=>options.useJit)),defaultEncapsulation:_lastDefined(optionsArr.map(options=>options.defaultEncapsulation)),providers:_mergeArrays(optionsArr.map(options=>options.providers)),missingTranslation:_lastDefined(optionsArr.map(options=>options.missingTranslation)),preserveWhitespaces:_lastDefined(optionsArr.map(options=>options.preserveWhitespaces))};var optionsArr;return Injector.create([COMPILER_PROVIDERS,{provide:CompilerConfig,useFactory:()=>new CompilerConfig({useJit:opts.useJit,jitDevMode:isDevMode(),defaultEncapsulation:opts.defaultEncapsulation,missingTranslation:opts.missingTranslation,preserveWhitespaces:opts.preserveWhitespaces}),deps:[]},opts.providers]).get(Compiler)}}function _lastDefined(args){for(let i=args.length-1;i>=0;i--)if(void 0!==args[i])return args[i]}function _mergeArrays(parts){const result=[];return parts.forEach(part=>part&&result.push(...part)),result}const platformCoreDynamic=createPlatformFactory(platformCore,"coreDynamic",[{provide:COMPILER_OPTIONS,useValue:{},multi:!0},{provide:CompilerFactory,useClass:JitCompilerFactory,deps:[COMPILER_OPTIONS]}]);class ResourceLoaderImpl extends ResourceLoader{get(url){let resolve,reject;const promise=new Promise((res,rej)=>{resolve=res,reject=rej}),xhr=new XMLHttpRequest;return xhr.open("GET",url,!0),xhr.responseType="text",xhr.onload=function(){const response=xhr.response||xhr.responseText;let status=1223===xhr.status?204:xhr.status;0===status&&(status=response?200:0),200<=status&&status<=300?resolve(response):reject(`Failed to load ${url}`)},xhr.onerror=function(){reject(`Failed to load ${url}`)},xhr.send(),promise}}ResourceLoaderImpl.ɵfac=/* @__PURE__ */function(){let ɵResourceLoaderImpl_BaseFactory;return function ResourceLoaderImpl_Factory(t){return(ɵResourceLoaderImpl_BaseFactory||(ɵResourceLoaderImpl_BaseFactory=i0.ɵɵgetInheritedFactory(ResourceLoaderImpl)))(t||ResourceLoaderImpl)}}(),ResourceLoaderImpl.ɵprov=/* @__PURE__ */i0.ɵɵdefineInjectable({token:ResourceLoaderImpl,factory:ResourceLoaderImpl.ɵfac}),function(){(typeof ngDevMode==="undefined"||ngDevMode)&&i0.ɵsetClassMetadata(ResourceLoaderImpl,[{type:Injectable}],null,null)}();const INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS=[ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS,{provide:COMPILER_OPTIONS,useValue:{providers:[{provide:ResourceLoader,useClass:ResourceLoaderImpl,deps:[]}]},multi:!0},{provide:PLATFORM_ID,useValue:ɵPLATFORM_BROWSER_ID}];const VERSION=new Version("14.2.12"),RESOURCE_CACHE_PROVIDER=[{provide:ResourceLoader,useClass:class extends ResourceLoader{constructor(){if(super(),this._cache=ɵglobal.$templateCache,null==this._cache)throw new Error("CachedResourceLoader: Template cache was not found in $templateCache.")}get(url){return this._cache.hasOwnProperty(url)?Promise.resolve(this._cache[url]):Promise.reject("CachedResourceLoader: Did not find cached template for "+url)}},deps:[]}],platformBrowserDynamic=createPlatformFactory(platformCoreDynamic,"browserDynamic",INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);export{JitCompilerFactory,RESOURCE_CACHE_PROVIDER,VERSION,platformBrowserDynamic,INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS as ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS,platformCoreDynamic as ɵplatformCoreDynamic};