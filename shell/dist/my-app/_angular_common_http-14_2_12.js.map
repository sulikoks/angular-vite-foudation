{"version":3,"file":"_angular_common_http-14_2_12.js","sources":["../../.pnpm/@angular+common@14.2.12_mfaua6ist3zuq7ixvpkrdcptfy/node_modules/@angular/common/fesm2020/http.mjs"],"sourcesContent":["/**\n * @license Angular v14.2.12\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, ÉµparseCookieValue, XhrFactory as XhrFactory$1 } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nclass HttpHandler {\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nclass HttpBackend {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nclass HttpHeaders {\n    /**  Constructs a new HTTP header object with the given values.*/\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach(line => {\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        const name = line.slice(0, index);\n                        const key = name.toLowerCase();\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            this.headers.get(key).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = () => {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    assertValidHeaders(headers);\n                }\n                this.headers = new Map();\n                Object.keys(headers).forEach(name => {\n                    let values = headers[name];\n                    const key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        this.headers.set(key, values);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param name The header name to check for existence.\n     *\n     * @returns True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or override for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach(key => {\n            this.headers.set(key, other.headers.get(key));\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\n        });\n    }\n    clone(update) {\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    applyUpdate(update) {\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                let value = update.value;\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                const toDelete = update.value;\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * @internal\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n    }\n}\n/**\n * Verifies that the headers object has the right shape: the values\n * must be either strings or arrays. Throws an error if an invalid\n * header value is present.\n */\nfunction assertValidHeaders(headers) {\n    for (const [key, value] of Object.entries(headers)) {\n        if (typeof value !== 'string' && !Array.isArray(value)) {\n            throw new Error(`Unexpected value of the \\`${key}\\` header provided. ` +\n                `Expecting either a string or an array, but got: \\`${value}\\`.`);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    encodeKey(key) {\n        return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n    encodeValue(value) {\n        return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n    decodeKey(key) {\n        return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n    decodeValue(value) {\n        return decodeURIComponent(value);\n    }\n}\nfunction paramParser(rawParams, codec) {\n    const map = new Map();\n    if (rawParams.length > 0) {\n        // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n        // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n        // may start with the `?` char, so we strip it if it's present.\n        const params = rawParams.replace(/^\\?/, '').split('&');\n        params.forEach((param) => {\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS = {\n    '40': '@',\n    '3A': ':',\n    '24': '$',\n    '2C': ',',\n    '3B': ';',\n    '3D': '=',\n    '3F': '?',\n    '2F': '/',\n};\nfunction standardEncoding(v) {\n    return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s);\n}\nfunction valueToString(value) {\n    return `${value}`;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nclass HttpParams {\n    constructor(options = {}) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(key => {\n                const value = options.fromObject[key];\n                // convert the values to strings\n                const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n                this.map.set(key, values);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param param The parameter name.\n     * @returns True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        const res = this.map.get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n    append(param, value) {\n        return this.clone({ param, value, op: 'a' });\n    }\n    /**\n     * Constructs a new body with appended values for the given parameter name.\n     * @param params parameters and values\n     * @return A new body with the new value.\n     */\n    appendAll(params) {\n        const updates = [];\n        Object.keys(params).forEach(param => {\n            const value = params[param];\n            if (Array.isArray(value)) {\n                value.forEach(_value => {\n                    updates.push({ param, value: _value, op: 'a' });\n                });\n            }\n            else {\n                updates.push({ param, value: value, op: 'a' });\n            }\n        });\n        return this.clone(updates);\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n    set(param, value) {\n        return this.clone({ param, value, op: 's' });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) {\n        return this.clone({ param, value, op: 'd' });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map(key => {\n            const eKey = this.encoder.encodeKey(key);\n            // `a: ['1']` produces `'a=1'`\n            // `b: []` produces `''`\n            // `c: ['1', '2']` produces `'c=1&c=2'`\n            return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value))\n                .join('&');\n        })\n            // filter out empty values because `b: []` produces `''`\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n            .filter(param => param !== '')\n            .join('&');\n    }\n    clone(update) {\n        const clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat(update);\n        return clone;\n    }\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n            this.updates.forEach(update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n                        base.push(valueToString(update.value));\n                        this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            let base = this.map.get(update.param) || [];\n                            const idx = base.indexOf(valueToString(update.value));\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                this.map.set(update.param, base);\n                            }\n                            else {\n                                this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nclass HttpContextToken {\n    constructor(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n}\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nclass HttpContext {\n    constructor() {\n        this.map = new Map();\n    }\n    /**\n     * Store a value in the context. If a value is already present it will be overwritten.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     * @param value The value to store.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    set(token, value) {\n        this.map.set(token, value);\n        return this;\n    }\n    /**\n     * Retrieve the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns The stored value or default if one is defined.\n     */\n    get(token) {\n        if (!this.map.has(token)) {\n            this.map.set(token, token.defaultValue());\n        }\n        return this.map.get(token);\n    }\n    /**\n     * Delete the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    delete(token) {\n        this.map.delete(token);\n        return this;\n    }\n    /**\n     * Checks for existence of a given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns True if the token exists, false otherwise.\n     */\n    has(token) {\n        return this.map.has(token);\n    }\n    /**\n     * @returns a list of tokens currently stored in the context.\n     */\n    keys() {\n        return this.map.keys();\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value) {\n    return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nclass HttpRequest {\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.context) {\n                this.context = options.context;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no context have been passed in, construct a new HttpContext instance.\n        if (!this.context) {\n            this.context = new HttpContext();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            isUrlSearchParams(this.body) || typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, boolean and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            typeof this.body === 'boolean') {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    clone(update = {}) {\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        const method = update.method || this.method;\n        const url = update.url || this.url;\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        let headers = update.headers || this.headers;\n        let params = update.params || this.params;\n        // Pass on context if needed\n        const context = update.context ?? this.context;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((params, param) => params.set(param, update.setParams[param]), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params,\n            headers,\n            context,\n            reportProgress,\n            responseType,\n            withCredentials,\n        });\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType;\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    constructor(init, defaultStatus = 200 /* HttpStatusCode.Ok */, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        context: options.context,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\nclass HttpClient {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n    request(first, url, options = {}) {\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\n                headers,\n                context: options.context,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((res) => res.body));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilities of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n}\nHttpClient.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: HttpClient, deps: [{ token: HttpHandler }], target: i0.ÉµÉµFactoryTarget.Injectable });\nHttpClient.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: HttpClient });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: HttpClient, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: HttpHandler }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nclass HttpInterceptorHandler {\n    constructor(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    handle(req) {\n        return this.interceptor.intercept(req, this.next);\n    }\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nclass NoopInterceptor {\n    intercept(req, next) {\n        return next.handle(req);\n    }\n}\nNoopInterceptor.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: NoopInterceptor, deps: [], target: i0.ÉµÉµFactoryTarget.Injectable });\nNoopInterceptor.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: NoopInterceptor });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: NoopInterceptor, decorators: [{\n            type: Injectable\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId = 0;\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\nlet foreignDocument;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n// Error text given when a request is passed to the JsonpClientBackend that has\n// headers set\nconst JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nclass JsonpCallbackContext {\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\nclass JsonpClientBackend {\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n        /**\n         * A resolved promise that can be used to schedule microtasks in the event handlers.\n         */\n        this.resolvedPromise = Promise.resolve();\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    nextCallback() {\n        return `ng_jsonp_callback_${nextRequestId++}`;\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Check the request headers. JSONP doesn't support headers and\n        // cannot set any that were supplied.\n        if (req.headers.keys().length > 0) {\n            throw new Error(JSONP_ERR_HEADERS_NOT_SUPPORTED);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            const callback = this.nextCallback();\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            let body = null;\n            // Whether the response callback has been called.\n            let finished = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            const cleanup = () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            const onLoad = (event) => {\n                // We wrap it in an extra Promise, to ensure the microtask\n                // is scheduled after the loaded endpoint has executed any potential microtask itself,\n                // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n                this.resolvedPromise.then(() => {\n                    // Cleanup the page.\n                    cleanup();\n                    // Check whether the response callback has run.\n                    if (!finished) {\n                        // It hasn't, something went wrong with the request. Return an error via\n                        // the Observable error path. All JSONP errors have status 0.\n                        observer.error(new HttpErrorResponse({\n                            url,\n                            status: 0,\n                            statusText: 'JSONP Error',\n                            error: new Error(JSONP_ERR_NO_CALLBACK),\n                        }));\n                        return;\n                    }\n                    // Success. body either contains the response body or null if none was\n                    // returned.\n                    observer.next(new HttpResponse({\n                        body,\n                        status: 200 /* HttpStatusCode.Ok */,\n                        statusText: 'OK',\n                        url,\n                    }));\n                    // Complete the stream, the response is over.\n                    observer.complete();\n                });\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            const onError = (error) => {\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error',\n                    url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return () => {\n                if (!finished) {\n                    this.removeListeners(node);\n                }\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    }\n    removeListeners(script) {\n        // Issue #34818\n        // Changing <script>'s ownerDocument will prevent it from execution.\n        // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n        if (!foreignDocument) {\n            foreignDocument = this.document.implementation.createHTMLDocument();\n        }\n        foreignDocument.adoptNode(script);\n    }\n}\nJsonpClientBackend.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: JsonpClientBackend, deps: [{ token: JsonpCallbackContext }, { token: DOCUMENT }], target: i0.ÉµÉµFactoryTarget.Injectable });\nJsonpClientBackend.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: JsonpClientBackend });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: JsonpClientBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\nclass JsonpInterceptor {\n    constructor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param req The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n    intercept(req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle(req);\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    }\n}\nJsonpInterceptor.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: JsonpInterceptor, deps: [{ token: JsonpClientBackend }], target: i0.ÉµÉµFactoryTarget.Injectable });\nJsonpInterceptor.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: JsonpInterceptor });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: JsonpInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: JsonpClientBackend }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\nclass HttpXhrBackend {\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\n        if (req.method === 'JSONP') {\n            throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\n        }\n        // Everything happens on Observable subscription.\n        return new Observable((observer) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            const xhr = this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                const detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                const responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            const reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            let headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            const partialFromXhr = () => {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                const statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                const url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers, status: xhr.status, statusText, url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            const onLoad = () => {\n                // Read response state from the memoized partial data.\n                let { headers, status, statusText, url } = partialFromXhr();\n                // The body will be read out if present.\n                let body = null;\n                if (status !== 204 /* HttpStatusCode.NoContent */) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 /* HttpStatusCode.Ok */ : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                let ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    const originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = { error, text: body };\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            const onError = (error) => {\n                const { url } = partialFromXhr();\n                const res = new HttpErrorResponse({\n                    error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progress event.\n            let sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            const onDownProgress = (event) => {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                let progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            const onUpProgress = (event) => {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                let progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            xhr.addEventListener('timeout', onError);\n            xhr.addEventListener('abort', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return () => {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('abort', onError);\n                xhr.removeEventListener('load', onLoad);\n                xhr.removeEventListener('timeout', onError);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                if (xhr.readyState !== xhr.DONE) {\n                    xhr.abort();\n                }\n            };\n        });\n    }\n}\nHttpXhrBackend.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: HttpXhrBackend, deps: [{ token: i1.XhrFactory }], target: i0.ÉµÉµFactoryTarget.Injectable });\nHttpXhrBackend.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: HttpXhrBackend });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: HttpXhrBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.XhrFactory }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nclass HttpXsrfTokenExtractor {\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * @internal for testing\n         */\n        this.parseCount = 0;\n    }\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ÉµparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n}\nHttpXsrfCookieExtractor.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: HttpXsrfCookieExtractor, deps: [{ token: DOCUMENT }, { token: PLATFORM_ID }, { token: XSRF_COOKIE_NAME }], target: i0.ÉµÉµFactoryTarget.Injectable });\nHttpXsrfCookieExtractor.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: HttpXsrfCookieExtractor });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: HttpXsrfCookieExtractor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [XSRF_COOKIE_NAME]\n                }] }]; } });\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    constructor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    intercept(req, next) {\n        const lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        const token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    }\n}\nHttpXsrfInterceptor.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: HttpXsrfInterceptor, deps: [{ token: HttpXsrfTokenExtractor }, { token: XSRF_HEADER_NAME }], target: i0.ÉµÉµFactoryTarget.Injectable });\nHttpXsrfInterceptor.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: HttpXsrfInterceptor });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: HttpXsrfInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: HttpXsrfTokenExtractor }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [XSRF_HEADER_NAME]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nclass HttpInterceptingHandler {\n    constructor(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    handle(req) {\n        if (this.chain === null) {\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\n        }\n        return this.chain.handle(req);\n    }\n}\nHttpInterceptingHandler.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: HttpInterceptingHandler, deps: [{ token: HttpBackend }, { token: i0.Injector }], target: i0.ÉµÉµFactoryTarget.Injectable });\nHttpInterceptingHandler.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: HttpInterceptingHandler });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: HttpInterceptingHandler, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: HttpBackend }, { type: i0.Injector }]; } });\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n */\nfunction interceptingHandler(backend, interceptors = []) {\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    }\n}\nHttpClientXsrfModule.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: HttpClientXsrfModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule });\nHttpClientXsrfModule.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.12\", ngImport: i0, type: HttpClientXsrfModule });\nHttpClientXsrfModule.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: HttpClientXsrfModule, providers: [\n        HttpXsrfInterceptor,\n        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n    ] });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: HttpClientXsrfModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        HttpXsrfInterceptor,\n                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                    ],\n                }]\n        }] });\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientModule {\n}\nHttpClientModule.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: HttpClientModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule });\nHttpClientModule.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.12\", ngImport: i0, type: HttpClientModule, imports: [HttpClientXsrfModule] });\nHttpClientModule.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: HttpClientModule, providers: [\n        HttpClient,\n        { provide: HttpHandler, useClass: HttpInterceptingHandler },\n        HttpXhrBackend,\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\n    ], imports: [HttpClientXsrfModule.withOptions({\n            cookieName: 'XSRF-TOKEN',\n            headerName: 'X-XSRF-TOKEN',\n        })] });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: HttpClientModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    /**\n                     * Optional configuration for XSRF protection.\n                     */\n                    imports: [\n                        HttpClientXsrfModule.withOptions({\n                            cookieName: 'XSRF-TOKEN',\n                            headerName: 'X-XSRF-TOKEN',\n                        }),\n                    ],\n                    /**\n                     * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                     * with supporting services for HTTP communications.\n                     */\n                    providers: [\n                        HttpClient,\n                        { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                        HttpXhrBackend,\n                        { provide: HttpBackend, useExisting: HttpXhrBackend },\n                    ],\n                }]\n        }] });\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientJsonpModule {\n}\nHttpClientJsonpModule.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: HttpClientJsonpModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule });\nHttpClientJsonpModule.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.12\", ngImport: i0, type: HttpClientJsonpModule });\nHttpClientJsonpModule.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: HttpClientJsonpModule, providers: [\n        JsonpClientBackend,\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n    ] });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: HttpClientJsonpModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        JsonpClientBackend,\n                        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n * @see `XhrFactory`\n * @deprecated\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\n */\nconst XhrFactory = XhrFactory$1;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, HttpInterceptingHandler as ÉµHttpInterceptingHandler };\n//# sourceMappingURL=http.mjs.map\n"],"names":["i1","DOCUMENT","XhrFactory$1","i0","Injectable","InjectionToken","Inject","PLATFORM_ID","NgModule","of","Observable","concatMap","filter","map","HttpHandler","HttpBackend","HttpHeaders","constructor","headers","this","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","name","slice","key","toLowerCase","value","trim","maybeSetNormalizedName","has","get","push","set","ngDevMode","Object","entries","Array","isArray","Error","assertValidHeaders","keys","values","length","init","from","getAll","append","clone","op","delete","lcName","copyFrom","update","applyUpdate","other","concat","base","undefined","toDelete","existing","fn","HttpUrlEncodingCodec","encodeKey","standardEncoding","encodeValue","decodeKey","decodeURIComponent","decodeValue","STANDARD_ENCODING_REGEX","STANDARD_ENCODING_REPLACEMENTS","v","encodeURIComponent","replace","s","t","valueToString","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","rawParams","codec","param","eqIdx","val","list","paramParser","res","appendAll","params","_value","toString","eKey","join","idx","splice","HttpContextToken","defaultValue","HttpContext","token","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","HttpRequest","method","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","mightHaveBody","context","urlWithParams","qIdx","sep","serializeBody","URLSearchParams","JSON","stringify","detectContentTypeHeader","type","setHeaders","reduce","setParams","HttpEventType","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","super","ResponseHeader","HttpResponse","Response","HttpErrorResponse","message","error","addBody","observe","HttpClient","handler","request","first","req","events$","pipe","handle","res$","event","head","jsonp","callbackParam","patch","post","put","minVersion","version","ngImport","deps","target","decorators","ctorParameters","HttpInterceptorHandler","next","interceptor","intercept","HTTP_INTERCEPTORS","NoopInterceptor","foreignDocument","nextRequestId","JsonpCallbackContext","JsonpClientBackend","callbackMap","document","resolvedPromise","Promise","resolve","nextCallback","observer","callback","node","createElement","src","finished","data","cleanup","parentNode","removeChild","addEventListener","then","complete","appendChild","Sent","removeListeners","script","implementation","createHTMLDocument","adoptNode","args","JsonpInterceptor","XSSI_PREFIX","HttpXhrBackend","xhrFactory","xhr","build","open","setRequestHeader","detectedType","reqBody","headerResponse","partialFromXhr","getAllResponseHeaders","responseURL","test","getResponseHeader","getResponseUrl","onLoad","response","responseText","originalBody","parse","text","onError","sentHeaders","onDownProgress","progressEvent","DownloadProgress","loaded","lengthComputable","total","partialText","onUpProgress","progress","UploadProgress","upload","send","removeEventListener","readyState","DONE","abort","XhrFactory","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","getToken","cookieString","cookie","HttpXsrfInterceptor","tokenService","headerName","lcUrl","startsWith","HttpInterceptingHandler","backend","injector","chain","interceptors","reduceRight","jsonpCallbackContext","window","Injector","HttpClientXsrfModule","static","ngModule","providers","provide","useClass","useValue","useExisting","multi","HttpClientModule","imports","withOptions","HttpClientJsonpModule","useFactory"],"mappings":"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"}